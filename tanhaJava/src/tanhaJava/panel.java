/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tanhaJava;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.geom.Line2D;
import static java.lang.String.valueOf;
import static java.lang.Thread.sleep;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Mahdi
 */
public class panel extends javax.swing.JPanel {
    public static boolean haveNodes=false;
    public static boolean haveConnection=false;
    public static ArrayList<Node> circleList = new ArrayList();
    public static int data;
    public panel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 532, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 432, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    
    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
            if(mainPage.CircleClick){
                boolean state = true;
                if( evt.getX() < 20 || evt.getY() < 20 ||  evt.getY() > mainPage.panel1.getHeight()-20 || evt.getX() > mainPage.panel1.getWidth()-20  ){
                    state = false ;
                }
                for(Node circle : this.circleList){                   
                 if(Math.abs(evt.getX()-circle.X)<40 && Math.abs(evt.getY()-circle.Y)<40){ 
                     state = false ;
                    }
                }      
                if(state){
                  this.circleList.add(new Node(evt.getX(),evt.getY()));
                  this.repaint(); 
                  haveNodes=true;   
                }                
            }
            else if(mainPage.LineClick){
                for(Node circle : this.circleList){                   
                    if( Math.abs(evt.getX()-circle.X)<20 && Math.abs(evt.getY()-circle.Y)<20){    
                        System.out.println(circle.X + circle.Y + evt.getX() + evt.getY());
                       if(mainPage.head == true){                      
                           circle.connection.add(mainPage.privuse.Name);
                           mainPage.privuse.connection.add(circle.Name);
                           mainPage.head = false;
                           this.repaint();
                       }else{
                           
                           mainPage.privuse = circle;
                           mainPage.head = true;
                           this.repaint();
                       }
                    }
                }
            } 
    }//GEN-LAST:event_formMouseClicked

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2 = (Graphics2D)g;
        int r = 20;
        if(mainPage.finishClick==false){
           for(Node circle : this.circleList){
           g2.setColor(Color.blue);
           if(mainPage.head && mainPage.privuse.Name == circle.Name)
           {
              g2.setColor(Color.pink); 
           }
           g2.setFont(new Font("Serif", Font.PLAIN, 17));
           g2.fillOval(circle.X-r,circle.Y-r, 2*r,2*r);
            g2.setStroke(new BasicStroke(2));
            Color myColorBlue=new Color(70, 166, 189);
           g2.setColor(myColorBlue);
           g2.drawOval(circle.X-r,circle.Y-r, 2*r,2*r);
           String str = valueOf(circle.Name);           
           String s = String.valueOf(250);
           FontMetrics fm = g.getFontMetrics();
           double textWidth = fm.getStringBounds(s, g).getWidth();
           g2.setColor(Color.white);
           g2.drawString(str, (int) (circle.X+(r-textWidth)/2),circle.Y+r/4);
        }
        for(Node circle : this.circleList){
            for (int Name : circle.connection) {
                if(Name>circle.Name){
                    for(Node circle1 : this.circleList){
                        if(circle1.Name == Name){
                            TestPane testPane = new TestPane(circle1.X-r,circle1.Y-r,circle.X-r,circle.Y-r,2*r);
                            Line2D line = testPane.getLine();
                            g2.setColor(Color.red);
                              g2.setStroke(new BasicStroke(2));
                            g2.draw(line);
                           
                            haveConnection=true;
                        }
                    }   
                }                                
            }
        }
            
        }else{
                for(Node circle : this.circleList){
                   g2.setColor(Color.blue);
                   if(data==circle.Name){
                       System.out.print("ali");
                      g2.setColor(Color.red); 
                   }
                   g2.setFont(new Font("Serif", Font.PLAIN, 17));
                   g2.fillOval(circle.X-r,circle.Y-r, 2*r,2*r);
                   String str = valueOf(circle.Name);           
                   String s = String.valueOf(250);
                   FontMetrics fm = g.getFontMetrics();
                   double textWidth = fm.getStringBounds(s, g).getWidth();
                   g2.setColor(Color.white);
                   g2.drawString(str, (int) (circle.X+(r-textWidth)/2),circle.Y+r/4);

                }
                for(Node circle : this.circleList){
                    for (int Name : circle.connection) {
                            if(Name>circle.Name){
                                for(Node circle1 : this.circleList){
                                    if(circle1.Name == Name){
                                        TestPane testPane = new TestPane(circle1.X-r,circle1.Y-r,circle.X-r,circle.Y-r,2*r);
                                        Line2D line = testPane.getLine();
                                        g2.setColor(Color.red);
                                        g2.draw(line);
                                        haveConnection=true;
                                    }
                                }   
                            }                                
                    }
                }
                
        }
        
    }
}
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

